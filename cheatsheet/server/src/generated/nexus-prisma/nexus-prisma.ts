/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Task: TaskObject
      TaskConnection: TaskConnectionObject
      PageInfo: PageInfoObject
      TaskEdge: TaskEdgeObject
      AggregateTask: AggregateTaskObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      TaskSubscriptionPayload: TaskSubscriptionPayloadObject
      TaskPreviousValues: TaskPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Task: TaskFieldDetails
      TaskConnection: TaskConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      TaskEdge: TaskEdgeFieldDetails
      AggregateTask: AggregateTaskFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      TaskSubscriptionPayload: TaskSubscriptionPayloadFieldDetails
      TaskPreviousValues: TaskPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      TaskWhereUniqueInput: TaskWhereUniqueInputInputObject
      TaskWhereInput: TaskWhereInputInputObject
      TaskCreateInput: TaskCreateInputInputObject
      TaskUpdateInput: TaskUpdateInputInputObject
      TaskUpdateManyMutationInput: TaskUpdateManyMutationInputInputObject
      TaskSubscriptionWhereInput: TaskSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    TaskOrderByInput: TaskOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'task', args?: QueryTaskArgs[] | false, alias?: string  } 
  | { name: 'tasks', args?: QueryTasksArgs[] | false, alias?: string  } 
  | { name: 'tasksConnection', args?: QueryTasksConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'task'
  | 'tasks'
  | 'tasksConnection'


type QueryTaskArgs =
  | 'where'
type QueryTasksArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTasksConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  task: {
    type: 'Task'
    args: Record<QueryTaskArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TaskWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Task | null> | prisma.Task | null
  }
  tasks: {
    type: 'Task'
    args: Record<QueryTasksArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TaskWhereInput | null, orderBy?: prisma.TaskOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Task[]> | prisma.Task[]
  }
  tasksConnection: {
    type: 'TaskConnection'
    args: Record<QueryTasksConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TaskWhereInput | null, orderBy?: prisma.TaskOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TaskConnection> | prisma.TaskConnection
  }
}
  

// Types for Task

type TaskObject =
  | TaskFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'isDone', args?: [] | false, alias?: string  } 

type TaskFields =
  | 'id'
  | 'content'
  | 'isDone'



  

export interface TaskFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isDone: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TaskConnection

type TaskConnectionObject =
  | TaskConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TaskConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TaskConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TaskConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TaskEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TaskConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TaskEdge[]> | prisma.TaskEdge[]
  }
  aggregate: {
    type: 'AggregateTask'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TaskConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTask> | prisma.AggregateTask
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for TaskEdge

type TaskEdgeObject =
  | TaskEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TaskEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TaskEdgeFieldDetails {
  node: {
    type: 'Task'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TaskEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Task> | prisma.Task
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTask

type AggregateTaskObject =
  | AggregateTaskFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTaskFields =
  | 'count'



  

export interface AggregateTaskFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createTask', args?: MutationCreateTaskArgs[] | false, alias?: string  } 
  | { name: 'updateTask', args?: MutationUpdateTaskArgs[] | false, alias?: string  } 
  | { name: 'updateManyTasks', args?: MutationUpdateManyTasksArgs[] | false, alias?: string  } 
  | { name: 'upsertTask', args?: MutationUpsertTaskArgs[] | false, alias?: string  } 
  | { name: 'deleteTask', args?: MutationDeleteTaskArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTasks', args?: MutationDeleteManyTasksArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createTask'
  | 'updateTask'
  | 'updateManyTasks'
  | 'upsertTask'
  | 'deleteTask'
  | 'deleteManyTasks'


type MutationCreateTaskArgs =
  | 'data'
type MutationUpdateTaskArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTasksArgs =
  | 'data'
  | 'where'
type MutationUpsertTaskArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTaskArgs =
  | 'where'
type MutationDeleteManyTasksArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createTask: {
    type: 'Task'
    args: Record<MutationCreateTaskArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TaskCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Task> | prisma.Task
  }
  updateTask: {
    type: 'Task'
    args: Record<MutationUpdateTaskArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TaskUpdateInput, where: TaskWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Task | null> | prisma.Task | null
  }
  updateManyTasks: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTasksArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TaskUpdateManyMutationInput, where?: TaskWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTask: {
    type: 'Task'
    args: Record<MutationUpsertTaskArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TaskWhereUniqueInput, create: TaskCreateInput, update: TaskUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Task> | prisma.Task
  }
  deleteTask: {
    type: 'Task'
    args: Record<MutationDeleteTaskArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TaskWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Task | null> | prisma.Task | null
  }
  deleteManyTasks: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTasksArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TaskWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'task', args?: SubscriptionTaskArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'task'


type SubscriptionTaskArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  task: {
    type: 'TaskSubscriptionPayload'
    args: Record<SubscriptionTaskArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TaskSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TaskSubscriptionPayload | null> | prisma.TaskSubscriptionPayload | null
  }
}
  

// Types for TaskSubscriptionPayload

type TaskSubscriptionPayloadObject =
  | TaskSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TaskSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TaskSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TaskSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Task'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TaskSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Task | null> | prisma.Task | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TaskPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TaskSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TaskPreviousValues | null> | prisma.TaskPreviousValues | null
  }
}
  

// Types for TaskPreviousValues

type TaskPreviousValuesObject =
  | TaskPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'isDone', args?: [] | false, alias?: string  } 

type TaskPreviousValuesFields =
  | 'id'
  | 'content'
  | 'isDone'



  

export interface TaskPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isDone: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface TaskWhereUniqueInput {
  id?: string | null
}
export type TaskWhereUniqueInputInputObject =
  | Extract<keyof TaskWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TaskWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  isDone?: boolean | null
  isDone_not?: boolean | null
  AND?: TaskWhereInput[]
  OR?: TaskWhereInput[]
  NOT?: TaskWhereInput[]
}
export type TaskWhereInputInputObject =
  | Extract<keyof TaskWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'isDone', alias?: string  } 
  | { name: 'isDone_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TaskCreateInput {
  id?: string | null
  content?: string
  isDone?: boolean
}
export type TaskCreateInputInputObject =
  | Extract<keyof TaskCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'isDone', alias?: string  } 
  
export interface TaskUpdateInput {
  content?: string | null
  isDone?: boolean | null
}
export type TaskUpdateInputInputObject =
  | Extract<keyof TaskUpdateInput, string>
  | { name: 'content', alias?: string  } 
  | { name: 'isDone', alias?: string  } 
  
export interface TaskUpdateManyMutationInput {
  content?: string | null
  isDone?: boolean | null
}
export type TaskUpdateManyMutationInputInputObject =
  | Extract<keyof TaskUpdateManyMutationInput, string>
  | { name: 'content', alias?: string  } 
  | { name: 'isDone', alias?: string  } 
  
export interface TaskSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TaskWhereInput | null
  AND?: TaskSubscriptionWhereInput[]
  OR?: TaskSubscriptionWhereInput[]
  NOT?: TaskSubscriptionWhereInput[]
}
export type TaskSubscriptionWhereInputInputObject =
  | Extract<keyof TaskSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type TaskOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'content_ASC'
  | 'content_DESC'
  | 'isDone_ASC'
  | 'isDone_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  